document.addEventListener("DOMContentLoaded", () => {
  loadRooms();

  document.getElementById("roomForm").addEventListener("submit", async (e) => {
    e.preventDefault();

    const id = document.getElementById("roomId").value;
    const room = {
      capacity: parseInt(document.getElementById("roomCapacity").value),
      occupied: document.getElementById("roomOccupied").value === "true",
      pricePerDay: parseFloat(document.getElementById("roomPrice").value),
    };

    if (id) room.id = parseInt(id); // –î–æ–±–∞–≤–ª—è–µ–º id –≤ –æ–±—ä–µ–∫—Ç –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

    const url = id
      ? "http://localhost:8080/room/update"
      : "http://localhost:8080/room/add";
    const method = id ? "PUT" : "POST";

    try {
      const res = await fetch(url, {
        method,
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(room),
      });

      if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞");

      alert(id ? "–ù–æ–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω" : "–ù–æ–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω");
      closeRoomModal();
      loadRooms();
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞:", err);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–º–µ—Ä");
    }
  });
});

async function loadRooms() {
  const tableBody = document.querySelector("#roomsTable tbody");
  tableBody.innerHTML = "";

  try {
    const res = await fetch("http://localhost:8080/room/getAll");
    const rooms = await res.json();

    rooms.forEach((room) => {
      const row = document.createElement("tr");
      row.innerHTML = `
          <td>${room.id}</td>
          <td>${room.capacity}</td>
          <td>${room.occupied ? "–î–∞" : "–ù–µ—Ç"}</td>
          <td>${room.pricePerDay} ‚ÇΩ</td>
          <td>
            <button onclick="editRoom(${room.id})">‚úèÔ∏è</button>
            <button onclick="deleteRoom(${room.id})">üóëÔ∏è</button>
          </td>
        `;
      tableBody.appendChild(row);
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–º–µ—Ä–æ–≤:", err);
  }
}

function openRoomModal(isEdit = false, room = null) {
  document.getElementById("roomModal").style.display = "block";
  document.getElementById("roomModalTitle").textContent = isEdit
    ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä"
    : "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä";

  document.getElementById("roomId").value = room?.id || "";
  document.getElementById("roomCapacity").value = room?.capacity || "";
  document.getElementById("roomOccupied").value = room?.occupied
    ? "true"
    : "false";
  document.getElementById("roomPrice").value = room?.pricePerDay || "";
}

function closeRoomModal() {
  document.getElementById("roomModal").style.display = "none";
}

async function editRoom(id) {
  try {
    const res = await fetch(`http://localhost:8080/room/getById/${id}`);
    const room = await res.json();
    openRoomModal(true, room);
  } catch (err) {
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–º–µ—Ä–∞");
  }
}

async function deleteRoom(id) {
  if (!confirm("–£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä?")) return;
  try {
    await fetch(`http://localhost:8080/room/delete/${id}`, {
      method: "DELETE",
    });
    loadRooms();
  } catch (err) {
    alert("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞");
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
function logout() {
  // –õ–æ–≥–∏–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞, —Ä–µ–¥–∏—Ä–µ–∫—Ç)
  alert("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã");
  // –ü—Ä–∏–º–µ—Ä —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
  window.location.href = "login.html"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –ø—É—Ç—å
}
